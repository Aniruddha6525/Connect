// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Model for the existing `users` table in Postgres/Neon
model User {
  id          String   @id @default(uuid()) @db.Uuid
  email       String   @unique @db.Text
  role        String?  @db.Text
  fullName    String?  @map("full_name") @db.Text
  bio         String?  @db.Text
  linkedin    String?  @db.Text
  github      String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  firebaseUid String?  @unique @map("firebase_uid") @db.Text

  @@map("users")
}

model Project {
  id          String   @id @default(uuid()) @db.Uuid
  title       String   @db.Text
  description String?  @db.Text
  techStack   String[]  @map("tech_stack")
  studentId   String?  @map("student_id") @db.Uuid
  createdAt   DateTime? @map("created_at") @db.Timestamptz(6)
  createdBy   String?  @map("created_by") @db.Uuid
  menteeId    String?  @map("mentee_id") @db.Uuid

  @@map("projects")
}

model Mentorship {
  id        String   @id @default(uuid()) @db.Uuid
  mentorId  String   @map("mentor_id") @db.Uuid
  menteeId  String?  @map("mentee_id") @db.Uuid
  topic     String?  @db.Text
  status    String   @default("pending") @db.Text
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@map("mentorships")
}

model Event {
  id         String   @id @default(uuid()) @db.Uuid
  title      String   @db.Text
  description String  @db.Text
  scheduledAt DateTime @map("scheduled_at") @db.Timestamp(6)
  hostId     String   @map("host_id") @db.Uuid
  createdAt  DateTime? @map("created_at") @db.Timestamptz(6)
  createdBy  String?  @map("created_by") @db.Uuid

  @@map("events")
}

model EventRegistration {
  id        String   @id @default(uuid()) @db.Uuid
  eventId   String   @map("event_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  createdAt DateTime? @map("created_at") @db.Timestamptz(6)
  menteeId  String?  @map("mentee_id") @db.Uuid

  @@map("event_registrations")
}

model Webinar {
  id         String   @id @default(uuid()) @db.Uuid
  title      String   @db.Text
  description String? @db.Text
  dateTime   DateTime @map("date_time") @db.Timestamp(6)
  speaker    String?  @db.Text
  createdBy  String?  @map("created_by") @db.Uuid
  createdAt  DateTime? @map("created_at") @db.Timestamp(6)

  @@map("webinars")
}

model WebinarRegistration {
  id           String   @id @default(uuid()) @db.Uuid
  webinarId    String?  @map("webinar_id") @db.Uuid
  userId       String?  @map("user_id") @db.Uuid
  registeredAt DateTime? @map("registered_at") @db.Timestamp(6)

  @@unique([webinarId, userId], name: "webinar_registrations_webinar_id_user_id_key")
  @@map("webinar_registrations")
}

model ForumPost {
  id        String   @id @default(uuid()) @db.Uuid
  authorId  String?  @map("author_id") @db.Uuid
  title     String?  @db.Text
  content   String?  @db.Text
  createdAt DateTime @map("created_at") @db.Timestamptz(6)

  @@map("forum_posts")
}

model ForumReply {
  id        String   @id @default(uuid()) @db.Uuid
  postId    String?  @map("post_id") @db.Uuid
  authorId  String?  @map("author_id") @db.Uuid
  content   String?  @db.Text
  createdAt DateTime @map("created_at") @db.Timestamptz(6)

  @@map("forum_replies")
}
